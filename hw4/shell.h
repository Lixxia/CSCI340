
#define SUCCESSFUL 0
#define ERROR -1

#define TRUE 1
#define FALSE 0

#define PATH_LENGTH 200
#define CMD_LENGTH 100

typedef struct {
	
	char* name;		// name of command (must malloc)
	int argc;		// total number of arguments
	char** argv;	// argument values (must malloc)
	
} command_t;

/* ------------------------------------------------------------------------------

This function will parse the command (cmd for short) and its arguments specified 
by the user.  
 
 function:
	- parameter(s): char* pointer that contains the cmd and its arguments, 
					and a pointer to an existing command_t structure
	- return: N/A

*/
void parse( char* line, command_t* p_cmd );

/* ------------------------------------------------------------------------------

This function will only execute external commands (cmd for short), such as ls 
or cp, using the execv system function. In the execute function, you must fork 
a child process. 
 
 function:
	- parameter(s): pointer to a command_t structure
    - return: status code from wait function.

*/
int execute( command_t* p_cmd );

/* ------------------------------------------------------------------------------

This function is used determine if the named command (cmd for short) entered by 
the user in the shell can be found in one of the folders defined in the PATH 
environment (env or short) variable.
 
 function:
	- parameter(s): char* pointer that contains the fullpath to named command found 
					by this function, and a pointer to an existing command_t structure
	- return: TRUE if cmd is in the PATH, or FALSE if not in the PATH. 

*/
int find_fullpath( char* fullpath, command_t* p_cmd );

/* ------------------------------------------------------------------------------

This function will determine if command (cmd for short) entered in the shell by 
the user is a valid builtin command.

function:
	- parameter(s): pointer to a command_t structure
	- return: TRUE if the cmd is in array, else FALSE if not in array. 

*/
int is_builtin( command_t* p_cmd );

/* ------------------------------------------------------------------------------

This function is used execute built-in commands such as change directory (cd)

function:
	- parameter(s): pointer to a command_t structure
	- return: SUCCESSFUL if no error occurred during chdir operation, or ERROR 
			if an error condition was generated by chdir operation.

*/
int do_builtin( command_t* p_cmd );

/* ------------------------------------------------------------------------------

This function is used to free memory that may be malloc'd for the name and argv 
fields in the command_t structure.  
 
function:
	- parameter(s): pointer to a command_t structure
	- return: N/A

*/
void cleanup( command_t* p_cmd );

/* ------------------------------------------------------------------------------

This function is used to compare two strings.
 
function:
	- parameter(s): two pointers to strings being compared
	- return: 1 if same, 0 if different

*/

int is_same(char* first, const char* second);

/* ------------------------------------------------------------------------------

This function is used to count the number of parameters 
using the delimiter provided.
 
function:
	- parameter(s): location of string, delimiter, true/false value for fix_turn
	- return: number of parameters 
*/

int count_params(char* string, char delimiter);

/* ------------------------------------------------------------------------------

This function is used to locate a pipe within the argv array.
 
function:
	- parameter(s): pointer to a command_t struct
	- return: 0 if pipe does not exist, otherwise location of pipe character in array 
*/

int find_pipe(command_t* p_cmd);